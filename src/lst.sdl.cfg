// ---------------- DEFINITIONS ----------------

//method selection (uncomment to include)
//#define LST__UNSAFE_ACCESS_ALLOWED

//data structure: chk
struct LST_CHK {
	ref             dat;
	struct LST_CHK* nxt;
};
typedef struct LST_CHK lst_chk;

//data structure: main
typedef struct {
	ulng     len;
	ulng     itmSz;
	lst_chk* head;
} lst;






// ---------------- BASICS ----------------

//existence
lst* lst__new(ulng itmSz);
void lst__free(lst* sbj);

//unsafe indexing
#ifdef LST__UNSAFE_ACCESS_ALLOWED //otherwise, internal use only
void lst__unsafe_get(lst* sbj, ulng idx, iref dst);
void lst__unsafe_set(lst* sbj, ulng idx, iref src);
#endif

//safe indexing
void lst__safe_get(lst* sbj, ulng idx, iref dst);
void lst__safe_set(lst* sbj, ulng idx, iref src);

//rm - pop - empty
void lst__rm(   lst* sbj, ulng idx);
void lst__pop(  lst* sbj, ulng idx, iref dst);
void lst__empty(lst* sbj);

//last
boo  lst__isEmpty(lst* sbj);
void lst__last(   lst* sbj, iref dst);
void lst__rmLast( lst* sbj);
void lst__popLast(lst* sbj, iref dst);

//push
void lst__push(lst* sbj, iref src);

//actions as a whole
void lst__overwrite(lst* sbj, iref src);

//actions between lsts
lst* lst__copy(lst* src);
